// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions ( account_id, category_id, user_id, amount, description, type, date )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, account_id, category_id, amount, type, date, description, is_recurring, metadata, created_at, updated_at, deleted_at
`

type CreateTransactionParams struct {
	AccountID   int32           `json:"account_id"`
	CategoryID  int32           `json:"category_id"`
	UserID      int32           `json:"user_id"`
	Amount      float64         `json:"amount"`
	Description sql.NullString  `json:"description"`
	Type        TransactionType `json:"type"`
	Date        time.Time       `json:"date"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.AccountID,
		arg.CategoryID,
		arg.UserID,
		arg.Amount,
		arg.Description,
		arg.Type,
		arg.Date,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountID,
		&i.CategoryID,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Description,
		&i.IsRecurring,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, user_id, account_id, category_id, amount, type, date, description, is_recurring, metadata, created_at, updated_at, deleted_at FROM transactions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountID,
		&i.CategoryID,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Description,
		&i.IsRecurring,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, user_id, account_id, category_id, amount, type, date, description, is_recurring, metadata, created_at, updated_at, deleted_at FROM transactions
LIMIT $1 OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccountID,
			&i.CategoryID,
			&i.Amount,
			&i.Type,
			&i.Date,
			&i.Description,
			&i.IsRecurring,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET amount = $2, account_id = $3, category_id = $4, user_id = $5, description = $6, type = $7, date = $8
WHERE id = $1
RETURNING id, user_id, account_id, category_id, amount, type, date, description, is_recurring, metadata, created_at, updated_at, deleted_at
`

type UpdateTransactionParams struct {
	ID          int32           `json:"id"`
	Amount      float64         `json:"amount"`
	AccountID   int32           `json:"account_id"`
	CategoryID  int32           `json:"category_id"`
	UserID      int32           `json:"user_id"`
	Description sql.NullString  `json:"description"`
	Type        TransactionType `json:"type"`
	Date        time.Time       `json:"date"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.ID,
		arg.Amount,
		arg.AccountID,
		arg.CategoryID,
		arg.UserID,
		arg.Description,
		arg.Type,
		arg.Date,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountID,
		&i.CategoryID,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Description,
		&i.IsRecurring,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
